const config = require('../config')
const {cmd , commands} = require('../command')
const os = require("os")


cmd({
    pattern: "settings2",
    alias: ["setting"],
    desc: "settings the bot",
    react: "‚öô",
    category: "owner"

},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        let desc = `
        
‚ï≠‚îà‚îâ‚îâ‚ö°‚öô  ùñ¨ùñ®ùñ≠ùñ¥ ùñ∑ùñ¨ùñ£ BOT SETTINGS ‚öô‚ö°‚îâ‚îâ‚îà
‚îá
‚îáüíº Work Mode : ùôøùöÑùô±ùôªùô∏ùô≤üåé/ùôøùöÅùô∏ùöÖùô∞ùöÉùô¥/ùô∏ùôΩùô±ùôæùöá/ùô∂ùöÅùôæùöÑùôø
‚îáüîä Auto Voice : ‚ôª ùôæùôΩ/ùôæùôµùôµ
‚îáüìù Auto Status : ‚ôª ùôæùôΩ/ùôæùôµùôµ
‚îáüìã Auto Bio : ‚ôª ùôæùôΩ/ùôæùôµùôµ
‚îá‚å® Auto Typing : ‚ôª ùôæùôΩ/ùôæùôµùôµ
‚îáüõ† Auto Read Command : ‚ôª ùôæùôΩ/ùôæùôµùôµ
‚ï∞‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà

   üîó  CUSTOMIZE YOUR SETTINGS ‚§µ
   
‚Ü™ Ä·¥á·¥ò ü è ·¥°…™·¥õ ú ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è s·¥á ü·¥á·¥Ñ·¥õ

    üîß OPTIONS MENU üîß

‚î£‚îÅ WORK MODE ‚§µ
‚îÉ   ‚î£ 1.1 üîπ Public Work
‚îÉ   ‚î£ 1.2 üîπ Private Work
‚îÉ   ‚î£ 1.3 üîπ Group Only
‚îÉ   ‚îó 1.4 üîπ Inbox Only

‚î£‚îÅ AUTO VOICE ‚§µ
‚îÉ   ‚î£ 2.1 üîä Auto Voice On
‚îÉ   ‚îó 2.2 üîï Auto Voice Off

‚î£‚îÅ AUTO STATUS SEEN ‚§µ
‚îÉ   ‚î£ 3.1 üëÅ‚Äçüó® Auto Read Status On
‚îÉ   ‚îó 3.2 üëÅ‚ùå Auto Read Status Off

‚î£‚îÅ AUTO BIO ‚§µ
‚îÉ   ‚î£ 4.1 ‚úç Auto Bio On
‚îÉ   ‚îó 4.2 ‚úç‚ùå Auto Bio Off

‚î£‚îÅ AUTO TYPING ‚§µ
‚îÉ   ‚î£ 6.1 üìù Activate Auto Typing
‚îÉ   ‚îó 6.2 üìù‚ùå Deactivate Auto Typing

‚î£‚îÅ AUTO COMMAND READ ‚§µ
‚îÉ   ‚î£ 7.1 üñä Activate Auto Command Read
‚îÉ   ‚îó 7.2 üñä‚ùå Deactivate Auto Command Read
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö ·¥ç·¥Ä ü·¥†…™…¥ ·¥ã…™…¥…¢*`;

        const vv = await conn.sendMessage(from, { image: { url:config.MENU_IMG}, caption: desc }, { quoted: mek });

        conn.ev.on('messages.upsert', async (msgUpdate) => {
            const msg = msgUpdate.messages[0];
            if (!msg.message || !msg.message.extendedTextMessage) return;

            const selectedOption = msg.message.extendedTextMessage.text.trim();

            if (msg.message.extendedTextMessage.contextInfo && msg.message.extendedTextMessage.contextInfo.stanzaId === vv.key.id) {
                switch (selectedOption) {
                    case '1.1':
                        reply(".update MODE:public" );
                        reply(".restart");
                        break;
                    case '1.2':               
                        reply(".update MODE:private");
                        reply(".restart");
                        break;
                    case '1.3':               
                          reply(".update MODE:group");
                        reply(".restart");
                      break;
                    case '1.4':     
                        reply(".update MODE:inbox");
                        reply(".restart");
                      break;
                    case '2.1':     
                        reply(".update AUTO_VOICE:true");
                        reply(".restart");
                        break;
                    case '2.2':     
                        reply(".update AUTO_VOICE:false");
                        reply(".restart");
                    break;
                    case '3.1':    
                        reply(".update AUTO_READ_STATUS:true");
                        reply(".restart");
                    break;
                    case '3.2':    
                        reply(".update AUTO_READ_STATUS:false");
                        reply(".restart");
                    break;
                    case '4.1': 
                    reply(".update AUTO_BIO:true");
                    reply(".restart");
                    break;
                    case '4.2': 
                    reply(".update AUTO_BIO:false");
                    reply(".restart");
                    break;
                    case '5.1':      
                        reply(".update AUTO_TYPING:true");
                        reply(".restart");
                        break;
                    case '5.2':   
                        reply(".update AUTO_TYPING:false");
                        reply(".restart");
                    break;
                    case '6.1': 
                        reply(".update AUTO_READ_CMD:true");
                        reply(".restart");
                    break;
                    case '6.2':   
                        reply(".update AUTO_READ_CMD:false");
                        reply(".restart");
                    
                        break;
                    default:
                        reply("Invalid option. Please select a valid optionüî¥");
                }

            }
        });

    } catch (e) {
        console.error(e);
        await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } })
        reply('An error occurred while processing your request.');
    }
});
